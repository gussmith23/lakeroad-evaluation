name: Run evaluation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # 4am PT.
    - cron: '0 11 * * *'

jobs:

  # TODO(@gussmith23) It would be nice if this wasn't necessary
  cleaner:
    runs-on: self-hosted
    steps:
      - name: Clean up previous runs
        run: rm -rf "${{ github.workspace }}"

  build-docker-image:
    # Make sure we clean first.
    needs: cleaner
    runs-on: self-hosted

    outputs:
      tag: ${{ steps.generate-tag.outputs.tag }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.PAT }}
        ssh-key: ${{ secrets.SSH_KEY }}
    
    # We don't use `submodules: recursive` above because some of the submodules
    # we point to have many, many submodules themselves. Thus, we check out the
    # submodules we need individually.
    #
    # TODO(@gussmith23): Depend less on submodules, or at least, depend on
    # cleaner submodules with less branching.
    - name: Checkout specific submodules
      run: |
        cd lakeroad
        git submodule init
        git submodule update f4pga-arch-defs/ Nitro-Parts-lib-Xilinx/ skywater-pdk-libs-sky130_fd_sc_hd/ SOFA/ verilator-unisims/ verilator_xilinx/

    - name: Generate Docker image tag
      id: generate-tag
      run: |
        export TAG=lakeroad-evaluation:$(date +%s)
        echo "Docker image tag: $TAG"
        echo "::set-output name=tag::$TAG"

    - name: Build Docker image
      run: |
        docker build \
          . \
          --file Dockerfile \
          --tag ${{ steps.generate-tag.outputs.tag }} \
          --build-arg VIVADO_BIN_DIR=/tools/Xilinx/Vivado/2021.2/bin \
          --build-arg MAKE_JOBS=36

  run-evaluation:
    needs: build-docker-image
    runs-on: self-hosted
    outputs:
      container-name: ${{ steps.run-evaluation.outputs.container-name }}
    steps:
    - id: run-evaluation
      run: |
        CONTAINER_NAME=lakeroad-evaluation-run-$(date +%s)
        echo "Docker container name: $CONTAINER_NAME"
        echo "::set-output name=container-name::$CONTAINER_NAME"
        docker run \
          --name $CONTAINER_NAME \
          -v /tools/Xilinx:/tools/Xilinx \
          --env LOGLEVEL=INFO \
          --env OUTPUT_DIR=/root/results \
          ${{ needs.build-docker-image.outputs.tag }} \
          doit --continue --file experiments/dodo.py -n `nproc`

  upload-artifact:
    # Runs even if evaluation failed. Lets us inspect partial results and logs.
    if: always()
    needs: run-evaluation
    runs-on: self-hosted
    steps:
    - run: docker cp ${{ needs.run-evaluation.outputs.container-name }}:/root/results results/
    - uses: actions/upload-artifact@v3
      with:
        name: evaluation-results
        path: results/

